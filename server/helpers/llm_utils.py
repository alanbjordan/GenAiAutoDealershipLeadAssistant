# helpers/llm_utils.py
import os
from openai import OpenAI

client = OpenAI(
    api_key = os.getenv("OPENAI_API_KEY"),
)

if not client.api_key:
    raise ValueError("API key not found. Please set the OPENAI_API_KEY environment variable.")


def generate_llm_natural_output(message_content: str) -> str:
    """
    Uses OpenAI's API to assist a user in their car search and test drive scheduling.

    The assistant's responsibilities include:
    1. Extracting relevant user preferences from their input.
    2. Querying the PostgreSQL database using provided tools to find matching cars.
    3. Summarizing suitable car options based on user preferences.
    4. Requesting user's contact information (primarily email).
    5. Encouraging users to schedule a test drive.

    Args:
        message_content (str): The user's input detailing their car preferences and needs.

    Returns:
        str: A refined and structured natural language response generated by the LLM.
    """

    prompt = (
        "You are an intelligent auto dealership assistant designed to help users find the perfect vehicle and schedule a test drive."
        " You have access to a PostgreSQL database containing detailed car information, and you must leverage this data to suggest vehicles matching the user's preferences.\n\n"

        "Please follow these steps precisely:\n"
        "1. Analyze the user's input carefully to identify specific car preferences (e.g., brand, model, type, year, color, budget).\n"
        "2. If the user's input includes incomplete or ambiguous information, gently ask clarifying questions.\n"
        "3. Once clear preferences are identified, use the provided database query tools to retrieve matching vehicles.\n"
        "4. Provide a concise and informative summary of the retrieved car options to the user. Highlight features that match their expressed interests.\n"
        "5. Politely request the user's email address or confirm existing contact information to facilitate further communication.\n"
        "6. End your response by explicitly encouraging the user to schedule a test drive, suggesting a convenient next step.\n\n"

        "Maintain a friendly, professional, and helpful tone.\n\n"

        "User-provided information:\n"
        f"{message_content}\n\n"

        "Generate your response clearly structured into:\n"
        "- Clarification questions (if any)\n"
        "- Summary of suitable vehicle options\n"
        "- Request for user's contact information (email)\n"
        "- Direct call-to-action for scheduling a test drive\n"
    )

    response = client.responses.create(
        model="gpt-4o",
        input=prompt
    )
    return response.output_text
